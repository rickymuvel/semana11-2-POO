'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.34209
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Negocios2015")>  _
Partial Public Class Negocios2015DataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Definiciones de métodos de extensibilidad"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub Insertclientes(instance As clientes)
    End Sub
  Partial Private Sub Updateclientes(instance As clientes)
    End Sub
  Partial Private Sub Deleteclientes(instance As clientes)
    End Sub
  Partial Private Sub Insertpaises(instance As paises)
    End Sub
  Partial Private Sub Updatepaises(instance As paises)
    End Sub
  Partial Private Sub Deletepaises(instance As paises)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.APP_MANTENIMIENTO.My.MySettings.Default.Negocios2015ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property clientes() As System.Data.Linq.Table(Of clientes)
		Get
			Return Me.GetTable(Of clientes)
		End Get
	End Property
	
	Public ReadOnly Property paises() As System.Data.Linq.Table(Of paises)
		Get
			Return Me.GetTable(Of paises)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_PaisListar")>  _
	Public Function usp_PaisListar() As ISingleResult(Of usp_PaisListarResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of usp_PaisListarResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_ClienteListado")>  _
	Public Function usp_ClienteListado() As ISingleResult(Of usp_ClienteListadoResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of usp_ClienteListadoResult))
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="Ventas.clientes")>  _
Partial Public Class clientes
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdCliente As String
	
	Private _NomCliente As String
	
	Private _DirCliente As String
	
	Private _idpais As String
	
	Private _fonoCliente As String
	
	Private _Activo As System.Nullable(Of Boolean)
	
	Private _paises As EntityRef(Of paises)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdClienteChanging(value As String)
    End Sub
    Partial Private Sub OnIdClienteChanged()
    End Sub
    Partial Private Sub OnNomClienteChanging(value As String)
    End Sub
    Partial Private Sub OnNomClienteChanged()
    End Sub
    Partial Private Sub OnDirClienteChanging(value As String)
    End Sub
    Partial Private Sub OnDirClienteChanged()
    End Sub
    Partial Private Sub OnidpaisChanging(value As String)
    End Sub
    Partial Private Sub OnidpaisChanged()
    End Sub
    Partial Private Sub OnfonoClienteChanging(value As String)
    End Sub
    Partial Private Sub OnfonoClienteChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._paises = CType(Nothing, EntityRef(Of paises))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdCliente", DbType:="VarChar(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property IdCliente() As String
		Get
			Return Me._IdCliente
		End Get
		Set
			If (String.Equals(Me._IdCliente, value) = false) Then
				Me.OnIdClienteChanging(value)
				Me.SendPropertyChanging
				Me._IdCliente = value
				Me.SendPropertyChanged("IdCliente")
				Me.OnIdClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NomCliente", DbType:="VarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property NomCliente() As String
		Get
			Return Me._NomCliente
		End Get
		Set
			If (String.Equals(Me._NomCliente, value) = false) Then
				Me.OnNomClienteChanging(value)
				Me.SendPropertyChanging
				Me._NomCliente = value
				Me.SendPropertyChanged("NomCliente")
				Me.OnNomClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DirCliente", DbType:="VarChar(60) NOT NULL", CanBeNull:=false)>  _
	Public Property DirCliente() As String
		Get
			Return Me._DirCliente
		End Get
		Set
			If (String.Equals(Me._DirCliente, value) = false) Then
				Me.OnDirClienteChanging(value)
				Me.SendPropertyChanging
				Me._DirCliente = value
				Me.SendPropertyChanged("DirCliente")
				Me.OnDirClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idpais", DbType:="Char(3)")>  _
	Public Property idpais() As String
		Get
			Return Me._idpais
		End Get
		Set
			If (String.Equals(Me._idpais, value) = false) Then
				If Me._paises.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidpaisChanging(value)
				Me.SendPropertyChanging
				Me._idpais = value
				Me.SendPropertyChanged("idpais")
				Me.OnidpaisChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fonoCliente", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property fonoCliente() As String
		Get
			Return Me._fonoCliente
		End Get
		Set
			If (String.Equals(Me._fonoCliente, value) = false) Then
				Me.OnfonoClienteChanging(value)
				Me.SendPropertyChanging
				Me._fonoCliente = value
				Me.SendPropertyChanged("fonoCliente")
				Me.OnfonoClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit")>  _
	Public Property Activo() As System.Nullable(Of Boolean)
		Get
			Return Me._Activo
		End Get
		Set
			If (Me._Activo.Equals(value) = false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="paises_clientes", Storage:="_paises", ThisKey:="idpais", OtherKey:="Idpais", IsForeignKey:=true)>  _
	Public Property paises() As paises
		Get
			Return Me._paises.Entity
		End Get
		Set
			Dim previousValue As paises = Me._paises.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._paises.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._paises.Entity = Nothing
					previousValue.clientes.Remove(Me)
				End If
				Me._paises.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.clientes.Add(Me)
					Me._idpais = value.Idpais
				Else
					Me._idpais = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("paises")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="Ventas.paises")>  _
Partial Public Class paises
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Idpais As String
	
	Private _NombrePais As String
	
	Private _clientes As EntitySet(Of clientes)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdpaisChanging(value As String)
    End Sub
    Partial Private Sub OnIdpaisChanged()
    End Sub
    Partial Private Sub OnNombrePaisChanging(value As String)
    End Sub
    Partial Private Sub OnNombrePaisChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._clientes = New EntitySet(Of clientes)(AddressOf Me.attach_clientes, AddressOf Me.detach_clientes)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Idpais", DbType:="Char(3) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Idpais() As String
		Get
			Return Me._Idpais
		End Get
		Set
			If (String.Equals(Me._Idpais, value) = false) Then
				Me.OnIdpaisChanging(value)
				Me.SendPropertyChanging
				Me._Idpais = value
				Me.SendPropertyChanged("Idpais")
				Me.OnIdpaisChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombrePais", DbType:="VarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property NombrePais() As String
		Get
			Return Me._NombrePais
		End Get
		Set
			If (String.Equals(Me._NombrePais, value) = false) Then
				Me.OnNombrePaisChanging(value)
				Me.SendPropertyChanging
				Me._NombrePais = value
				Me.SendPropertyChanged("NombrePais")
				Me.OnNombrePaisChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="paises_clientes", Storage:="_clientes", ThisKey:="Idpais", OtherKey:="idpais")>  _
	Public Property clientes() As EntitySet(Of clientes)
		Get
			Return Me._clientes
		End Get
		Set
			Me._clientes.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_clientes(ByVal entity As clientes)
		Me.SendPropertyChanging
		entity.paises = Me
	End Sub
	
	Private Sub detach_clientes(ByVal entity As clientes)
		Me.SendPropertyChanging
		entity.paises = Nothing
	End Sub
End Class

Partial Public Class usp_PaisListarResult
	
	Private _Idpais As String
	
	Private _NombrePais As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Idpais", DbType:="Char(3) NOT NULL", CanBeNull:=false)>  _
	Public Property Idpais() As String
		Get
			Return Me._Idpais
		End Get
		Set
			If (String.Equals(Me._Idpais, value) = false) Then
				Me._Idpais = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombrePais", DbType:="VarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property NombrePais() As String
		Get
			Return Me._NombrePais
		End Get
		Set
			If (String.Equals(Me._NombrePais, value) = false) Then
				Me._NombrePais = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_ClienteListadoResult
	
	Private _IdCliente As String
	
	Private _NomCliente As String
	
	Private _DirCliente As String
	
	Private _NombrePais As String
	
	Private _fonoCliente As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdCliente", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property IdCliente() As String
		Get
			Return Me._IdCliente
		End Get
		Set
			If (String.Equals(Me._IdCliente, value) = false) Then
				Me._IdCliente = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NomCliente", DbType:="VarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property NomCliente() As String
		Get
			Return Me._NomCliente
		End Get
		Set
			If (String.Equals(Me._NomCliente, value) = false) Then
				Me._NomCliente = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DirCliente", DbType:="VarChar(60) NOT NULL", CanBeNull:=false)>  _
	Public Property DirCliente() As String
		Get
			Return Me._DirCliente
		End Get
		Set
			If (String.Equals(Me._DirCliente, value) = false) Then
				Me._DirCliente = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombrePais", DbType:="VarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property NombrePais() As String
		Get
			Return Me._NombrePais
		End Get
		Set
			If (String.Equals(Me._NombrePais, value) = false) Then
				Me._NombrePais = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fonoCliente", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property fonoCliente() As String
		Get
			Return Me._fonoCliente
		End Get
		Set
			If (String.Equals(Me._fonoCliente, value) = false) Then
				Me._fonoCliente = value
			End If
		End Set
	End Property
End Class
